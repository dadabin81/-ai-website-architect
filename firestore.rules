rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Sites: Users can only read/write/delete their own sites.
    match /sites/{siteId} {
      allow read, write, delete: if isOwner(resource.data.userId);
    }

    // Blogs: Users can only read/write/delete their own blogs.
    match /blogs/{blogId} {
      allow read, write, delete: if isOwner(resource.data.userId);
    }
    
    // Media: Users can only read/write/delete their own media files.
    match /media/{mediaId} {
      allow read, write, delete: if isOwner(resource.data.userId);
    }

    // Domains: Users can only read/write/delete their own domains.
    match /domains/{domainId} {
      allow read, write, delete: if isOwner(resource.data.userId);
    }
    
    // Published Sites: Anyone can read a published site. Only the owner of the original site can create/delete the publication entry.
    match /publishedSites/{subdomain} {
      allow get: if true;
      allow list: if false; // Disallow listing all published sites
      allow create: if exists(/databases/$(database)/documents/sites/$(request.resource.data.siteId)) &&
                     isOwner(get(/databases/$(database)/documents/sites/$(request.resource.data.siteId)).data.userId);
      allow delete: if exists(/databases/$(database)/documents/sites/$(resource.data.siteId)) &&
                     isOwner(get(/databases/$(database)/documents/sites/$(resource.data.siteId)).data.userId);
      allow update: if false; // updates are not allowed
    }

    // Users can only list their own documents from any collection
    match /{collection}/{docId} {
      allow list: if request.auth != null && request.query.where[0][1] == 'userId' && request.query.where[0][2] == request.auth.uid;
    }
  }
}