rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Sites: Users can only CUD their own sites.
    // List/Get operations require the query to filter by the user's own ID.
    match /sites/{siteId} {
      allow read, delete, update: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if request.auth != null && request.query.where.size() == 1 && request.query.where[0].field == 'userId' && request.query.where[0].value == request.auth.uid;
    }
    
    // Blogs: Users can only CUD their own blogs.
    // List/Get operations require the query to filter by the user's own ID.
    match /blogs/{blogId} {
      allow read, delete, update: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if request.auth != null && request.query.where.size() == 1 && request.query.where[0].field == 'userId' && request.query.where[0].value == request.auth.uid;
    }

    // Media: Users can only CUD their own media.
    // List/Get operations require the query to filter by the user's own ID.
    match /media/{mediaId} {
      allow read, delete, update: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if request.auth != null && request.query.where.size() == 1 && request.query.where[0].field == 'userId' && request.query.where[0].value == request.auth.uid;
    }

    // Domains: Users can only CUD their own domains.
    // List/Get operations require the query to filter by the user's own ID.
    match /domains/{domainId} {
      allow read, delete, update: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if request.auth != null && request.query.where.size() == 1 && request.query.where[0].field == 'userId' && request.query.where[0].value == request.auth.uid;
    }
    
    // Published Sites: Publicly readable, but only the owner can manage them.
    match /publishedSites/{subdomain} {
      allow get; // Allows anyone to read a single published site by its subdomain URL
      allow list: if false; // Disallow listing all published sites
      allow create, update, delete: if isOwner(resource.data.userId) || isOwner(request.resource.data.userId);
    }
  }
}