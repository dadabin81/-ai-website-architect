// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Generates a complete blog template with a featured post, sidebar, and navigation based on a given topic.
 *
 * - generateBlogTemplate - A function that generates a blog template.
 * - GenerateBlogTemplateInput - The input type for the generateBlogTemplate function.
 * - GenerateBlogTemplateOutput - The return type for the generateBlogTemplate function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateBlogTemplateInputSchema = z.object({
  blogTopic: z.string().describe('The main topic for which to generate a blog.'),
  mediaLibraryUrls: z.array(z.string()).optional().describe('An optional array of public URLs for images from the user\'s media library to be incorporated into the website.'),
});
export type GenerateBlogTemplateInput = z.infer<typeof GenerateBlogTemplateInputSchema>;

const GenerateBlogTemplateOutputSchema = z.object({
  htmlContent: z
    .string()
    .describe(
      'A complete, self-contained HTML document string that includes CSS within a <style> tag. The HTML should represent a visually appealing and content-rich blog template. Use placeholder images from https://placehold.co where appropriate.'
    ),
  suggestedLayout: z.string().describe("An explanation of the layout style chosen (e.g., 'Minimalist, single-column') and why it is appropriate for the blog's topic."),
  suggestedColorScheme: z.string().describe("An explanation of the color scheme chosen and how it reflects the mood and subject matter of the blog."),
});
export type GenerateBlogTemplateOutput = z.infer<typeof GenerateBlogTemplateOutputSchema>;

export async function generateBlogTemplate(input: GenerateBlogTemplateInput): Promise<GenerateBlogTemplateOutput> {
  return generateBlogTemplateFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateBlogTemplatePrompt',
  input: {schema: GenerateBlogTemplateInputSchema},
  output: {schema: GenerateBlogTemplateOutputSchema},
  prompt: `You are an avant-garde AI web designer and content strategist, celebrated for creating bespoke, elegant, and modern blog experiences. Your task is to generate a unique, single-page HTML blog template perfectly tailored to the given topic.

**Your process must be design-led:**
1.  **Analyze the Topic:** First, deeply consider the provided \`{{{blogTopic}}}\`.
2.  **Choose a Design Style:** Based on your analysis, select a distinct and appropriate design style. Your choice should be deliberate and reflect the topic's essence. Avoid generic templates. Examples of styles to consider:
    *   **Minimalist & Clean:** For topics like tech, finance, or architecture.
    *   **Editorial & Classic:** For literature, history, or high-end fashion.
    *   **Bold & Brutalist:** For modern art, underground music, or startups wanting to make a statement.
    *   **Warm & Rustic:** For cooking, travel, or lifestyle blogs.
    *   **Playful & Vibrant:** For creative hobbies, parenting, or youth-focused topics.
3.  **Execute Flawlessly:** Implement the chosen design with elegance and modern flair.

The final output must be world-class in both design and content. This means:

- **Exceptional, Engaging Content:** Generate a feature-length, well-researched, and insightful main blog post directly related to the provided topic. The content must be engaging, well-structured with headings and paragraphs, and provide real value to the reader. Additionally, create realistic titles and brief excerpts for 3-4 other "recent posts" to make the blog feel established and active. Absolutely no "Lorem Ipsum" or generic filler text.

- **Sophisticated & Contextual Layout:** The layout itself should be a product of your chosen design style. It could be a full-width immersive layout, a traditional content-sidebar structure, an asymmetric grid, etc. Implement a clear visual hierarchy, excellent readability, and a comprehensive footer.

- **Functional & Stable Navigation:** The header must contain navigation links (e.g., "Home", "About", "Contact"). Each link MUST point to a section on the page using an 'href' attribute that starts with a '#' (e.g., 'href="#about"'). You MUST ensure a corresponding element exists with a matching 'id' (e.g., '<section id="about">...'). **CRITICALLY**, you must include a JavaScript snippet to handle smooth scrolling and prevent page reloads. Add the following script right before the closing '</body>' tag:
  \`\`\`html
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll("a[href^='#']").forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const targetId = this.getAttribute('href');
          const targetElement = document.querySelector(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({ behavior: 'smooth' });
          }
        });
      });
    });
  <\/script>
  \`\`\`

- **World-Class Design & CSS:** All CSS must be self-contained within a single <style> tag. The design must be fully responsive, adapting beautifully to all screen sizes. Use a refined, topic-appropriate color palette, elegant typography, and subtle animations or hover effects.

- **Image Usage Rules:**
  - **Priority:** If the user provides a list of images in \`mediaLibraryUrls\`, you MUST prioritize using these images in the generated HTML. Use them for key elements like the hero image, author photo, or embedded content images. You can access them using their direct URL, for example: \`src="{{{mediaLibraryUrls.[0]}}}"\`.
  - **Fallback:** If no images are provided, or if you need more images than what the user provided, you MUST use the AI image generation format: \`src="image-prompt:A descriptive prompt for a high-quality, relevant image"\`. For example: \`src="image-prompt:a professional photograph of a sun-drenched minimalist writing desk with a steaming coffee cup"\`.

Blog Topic: {{{blogTopic}}}
{{#if mediaLibraryUrls}}
User-provided Images:
{{#each mediaLibraryUrls}}
- {{{this}}}
{{/each}}
{{/if}}

Return the complete HTML content. For the \`suggestedLayout\` and \`suggestedColorScheme\` fields, explain the design style you chose and why it's a good fit for the blog topic. Adhere strictly to the output schema.`,
});

const generateBlogTemplateFlow = ai.defineFlow(
  {
    name: 'generateBlogTemplateFlow',
    inputSchema: GenerateBlogTemplateInputSchema,
    outputSchema: GenerateBlogTemplateOutputSchema,
  },
  async input => {
    // 1. Generate the initial HTML template with image prompts
    const {output} = await prompt(input);
    if (!output) {
      throw new Error('Failed to generate blog template.');
    }

    let htmlContent = output.htmlContent;
    const imagePrompts: string[] = [];
    const regex = /src="image-prompt:([^"]+)"/g;

    // 2. Extract all image prompts from the HTML
    let match;
    while ((match = regex.exec(htmlContent)) !== null) {
      imagePrompts.push(match[1]);
    }

    if (imagePrompts.length > 0) {
      // 3. Generate all images in parallel
      const imageGenerationPromises = imagePrompts.map(p =>
        ai.generate({
          model: 'googleai/gemini-2.0-flash-preview-image-generation',
          prompt: p,
          config: {
            responseModalities: ['TEXT', 'IMAGE'],
          },
        })
      );

      const imageResults = await Promise.all(imageGenerationPromises);

      const generatedImageUrls = imageResults.map(result => result.media?.url || '');

      // 4. Replace prompts with actual image data URIs
      let imageIndex = 0;
      htmlContent = htmlContent.replace(regex, () => {
        const imageUrl = generatedImageUrls[imageIndex];
        imageIndex++;
        // If image generation failed for some reason, use a placeholder
        return `src="${imageUrl || 'https://placehold.co/600x400.png'}"`;
      });
    }

    // 5. Return the final output with real images
    return {
      ...output,
      htmlContent,
    };
  }
);
